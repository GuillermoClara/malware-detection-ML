from Servers import CentralizedServer, FederatedServer
from Devices import NormalDevice
from Preprocessor import is_number


def main_menu():
    print('======================================================================================')
    print('           MALWARE DETECTION USING MACHINE AND FEDERATED LEARNING')
    print('======================================================================================')
    print('Georgia State University')
    print('Course: Operating Systems')
    print('Student: Guillermo Clara')
    print('Professor: Yanqing Zhang')

    print('')
    print('This software was used to research and compare how machine')
    print('learning algorithms can be used to detect potential malicious files')
    print('To do this, different features of PEFILE format of both malicious')
    print('and benign files were collected')
    print('')
    print('1. Start Simulation')
    print('2. Learn more about the idea of the research')
    print('3. End Program')
    print('')
    opt = input('Select an option: ') or '3'

    match opt:
        case '1':
            simulation_menu()

        case '2':
            file = open('research_idea.txt')
            for line in file.readlines():
                print(line)

            main_menu()

        case _:
            return


def simulation_menu():

    finished = False

    while not finished:
        print('======================================================================================')
        print('           SELECT WHICH TYPE OF MACHINE LEARNING APPROACH TO USE')
        print('======================================================================================')
        print('1. Centralized: Traditional machine learning technique where the dataset is hosted')
        print('at a central server. Predictions are done by the centralized model')
        print('')
        print('2. Federated: Instead of centralizing the dataset and model, it is splitted along N edge devices')
        print('Each device trains their local model')
        print('Then, devices send their models to be aggregated at the centralized server')
        print('where a new global model is created and redeployed to edge devices')
        print('')
        print('3. Finish program')
        print('')
        opt = str(input('Select an option: ')).strip()

        match opt:
            case '1':
                centralized_menu()
            case '2':
                federated_menu()
            case _:
                finished = True




def centralized_menu():

    central_server = CentralizedServer()
    device = NormalDevice(central_server)

    print('======================================================================================')
    print('           CENTRALIZED APPROACH SIMULATION')
    print('======================================================================================')
    print('Before testing the prediction model, make sure to set the settings for the server')

    malware_amount = input('Amount of malware samples to use for training (max and default 3000): ') or 3000

    # Unexpected input handling
    if not is_number(malware_amount):
        malware_amount = 3000
    malware_amount = int(malware_amount)

    benign_amount = input('Amount of benign samples to use for training (max and default 3000): ') or 3000

    # Unexpected input handling
    if not is_number(benign_amount):
        benign_amount = 3000
    benign_amount = int(benign_amount)

    central_server.init_dataset(benign_amount=benign_amount, malware_amount=malware_amount)
    device.load_samples()
    central_server.prompt_model()
    central_server.init_models()
    print('')
    central_server.train()

    # Get validation and training statistics and start device simulation
    central_server.get_stats()

    print('')

    device.start_device_simulation()


def federated_menu():

    federated_server = FederatedServer()

    print('======================================================================================')
    print('           FEDERATED APPROACH SIMULATION')
    print('======================================================================================')
    print('Before testing the prediction model, make sure to set the settings for the server')

    devices_amount = input('Amount of edge devices contributing (default 5): ') or '5'

    # Unexpected input handling
    if not is_number(devices_amount):
        devices_amount = 5
    devices_amount = int(devices_amount)

    federated_server.init_edge_devices(devices_amount)
    federated_server.initial_model_settings()
    federated_server.federate()
    federated_server.federated_server_menu()


main_menu()




